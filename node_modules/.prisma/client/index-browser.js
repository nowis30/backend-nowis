
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PropertyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyId: 'companyId',
  name: 'name',
  address: 'address',
  acquisitionDate: 'acquisitionDate',
  purchasePrice: 'purchasePrice',
  currentValue: 'currentValue',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  neq: 'neq',
  fiscalYearEnd: 'fiscalYearEnd',
  province: 'province',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShareholderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  displayName: 'displayName',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanyShareholderScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  shareholderId: 'shareholderId',
  role: 'role',
  votingPercent: 'votingPercent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShareClassScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  code: 'code',
  description: 'description',
  hasVotingRights: 'hasVotingRights',
  participatesInGrowth: 'participatesInGrowth',
  dividendPolicy: 'dividendPolicy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShareTransactionScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  shareClassId: 'shareClassId',
  shareholderId: 'shareholderId',
  type: 'type',
  transactionDate: 'transactionDate',
  quantity: 'quantity',
  pricePerShare: 'pricePerShare',
  considerationPaid: 'considerationPaid',
  fairMarketValue: 'fairMarketValue',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CorporateStatementScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  statementType: 'statementType',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  isAudited: 'isAudited',
  totalAssets: 'totalAssets',
  totalLiabilities: 'totalLiabilities',
  totalEquity: 'totalEquity',
  totalRevenue: 'totalRevenue',
  totalExpenses: 'totalExpenses',
  netIncome: 'netIncome',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CorporateStatementLineScalarFieldEnum = {
  id: 'id',
  statementId: 'statementId',
  category: 'category',
  label: 'label',
  amount: 'amount',
  orderIndex: 'orderIndex',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CorporateResolutionScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  type: 'type',
  title: 'title',
  resolutionDate: 'resolutionDate',
  body: 'body',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PropertyUnitScalarFieldEnum = {
  id: 'id',
  propertyId: 'propertyId',
  label: 'label',
  squareFeet: 'squareFeet',
  rentExpected: 'rentExpected'
};

exports.Prisma.MortgageScalarFieldEnum = {
  id: 'id',
  propertyId: 'propertyId',
  lender: 'lender',
  principal: 'principal',
  rateAnnual: 'rateAnnual',
  termMonths: 'termMonths',
  amortizationMonths: 'amortizationMonths',
  startDate: 'startDate',
  paymentFrequency: 'paymentFrequency',
  paymentAmount: 'paymentAmount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RevenueScalarFieldEnum = {
  id: 'id',
  propertyId: 'propertyId',
  label: 'label',
  amount: 'amount',
  frequency: 'frequency',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExpenseScalarFieldEnum = {
  id: 'id',
  propertyId: 'propertyId',
  label: 'label',
  category: 'category',
  amount: 'amount',
  frequency: 'frequency',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  propertyId: 'propertyId',
  invoiceDate: 'invoiceDate',
  supplier: 'supplier',
  amount: 'amount',
  category: 'category',
  gst: 'gst',
  qst: 'qst',
  description: 'description',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceItemScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  label: 'label',
  amount: 'amount'
};

exports.Prisma.DepreciationSettingScalarFieldEnum = {
  id: 'id',
  propertyId: 'propertyId',
  classCode: 'classCode',
  ccaRate: 'ccaRate',
  openingUcc: 'openingUcc',
  additions: 'additions',
  dispositions: 'dispositions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.UserRoleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  roleId: 'roleId',
  companyId: 'companyId'
};

exports.Prisma.AttachmentScalarFieldEnum = {
  id: 'id',
  propertyId: 'propertyId',
  mortgageId: 'mortgageId',
  title: 'title',
  filename: 'filename',
  contentType: 'contentType',
  size: 'size',
  storagePath: 'storagePath',
  checksum: 'checksum',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Property: 'Property',
  Company: 'Company',
  Shareholder: 'Shareholder',
  CompanyShareholder: 'CompanyShareholder',
  ShareClass: 'ShareClass',
  ShareTransaction: 'ShareTransaction',
  CorporateStatement: 'CorporateStatement',
  CorporateStatementLine: 'CorporateStatementLine',
  CorporateResolution: 'CorporateResolution',
  PropertyUnit: 'PropertyUnit',
  Mortgage: 'Mortgage',
  Revenue: 'Revenue',
  Expense: 'Expense',
  Invoice: 'Invoice',
  InvoiceItem: 'InvoiceItem',
  DepreciationSetting: 'DepreciationSetting',
  Role: 'Role',
  UserRole: 'UserRole',
  Attachment: 'Attachment'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
